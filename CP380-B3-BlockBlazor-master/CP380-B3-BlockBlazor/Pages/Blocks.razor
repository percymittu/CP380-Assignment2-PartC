@page "/blocks"

@using CP380_B1_BlockList.Models
@using Data

<h3>Blocks</h3>

@if (blocklist == null)
{
    <p><em>Loading...</em></p> }
else
{
    <html>
    <head>
        
    </head>
    <body>
        <div class="right">
            <button class="btn btn-success" @onclick="MineBlock">
                Mine Block
            </button>
        </div>
  
        <div class="card-columns">
        <!-- TODO: Add cards for each block in the block list

                   Each card should show:
                        - the position in the chain (starting at 0)
                        - the hash
                        - the nonce
                        - the previous hash
          -->        
        @{
            var count = 1;
        }
        @foreach (var item in blocklist)
        {
            <div class="card">            
                <div class="card-body">Position: @count
                  <p class="card-text">Date: @item.TimeStamp</p>
                  <p class="card-text">Hash: @item.Hash</p>
                  <p class="card-text">Nonce: @item.Nonce</p>
                  <p class="card-text">PreviousHash: @item.PreviousHash</p>
                </div>
            </div>
            ++count;
        }
    </div>

    </body>
</html>

}

@code { IEnumerable<Block> blocklist;
    BlockService service = new BlockService();
    PendingTransactionService pendingTransactionService = new PendingTransactionService();

    protected override async Task OnInitializedAsync()
    {
        blocklist = (await service.ListBlocks()).ToList();
    }

    private async void MineBlock()
    {
        MiningService miningService = new MiningService(service, pendingTransactionService);
        Task<Block> blockNew = miningService.MineBlock(blocklist);
        Task<Block> block = service.SubmitNewBlockAsync(blockNew.Result);

        blocklist = (await service.ListBlocks()).ToList();
    } 
}
